JAPAN

A. Tell me about yourself
- My name is Seungmoon
- Over 3 years Engineering experience in two banks in Canada and a start-up Company
- Started as a JavaScript developer but moved to DevOps position
- Could see greater challenges and values in automating application delievery and resolving technicsl issues
- Profiency at CI/CD with Jenkins, Nexus, Bitbucket, Cloud
- Strong experience in developing pipeline code in bash, groovy, python
- Strong experience in Instracture as Code using Cloudity Blueprints running on Openstack.
- Looking forward to move to Japan to for my next career

B. My success story and failure story
- Failure
- Not having right tool for the requirement.
- Forced to do manual deployment due to limitation of the tool and organization
- Start breaking as app size & components to deploy grew

- Success
- Jenkins pipelining
- On-board pipeline to one project, slowly getting other projects to adapt
- Noted as key accomplishment of the department and being mentioned on townhalls

C. Why are you interested in coming to Japan
- My mother has been living in Japan and wants to stay in Japan for rest of her life
- I want to join her

D. Why are you interested in LINE
- Tech company, having more emphasis on engineering than regulation (Banks have very strong governance and strict policy on how to do engineering)
- Proponent of open-source (Banks prohibit many, if not all, open sourced tools)
- Nature of services is interesting, which is very customer facing (Banks have few customer facing projects)
- Likely to have smaller number of division and teams than big banks (divisions owning different sections of engineering process results in policial conflict)

E. What do you want to do for your next career
- I want to improve my skills and experience in DevOps, moving to more senior DevOps role in the future

F. Any question to LINE
- Is DevOps team a standalone team or do DevOps engineers belong into each tech pod (consisting Dev, QA, BA, etc)
- How are DevOps team evaluated? (reduction in release cycle / reduced bugs & failures in production)
- DevOps Orchestartion tools? Does this have access to all environments?
- Code Repository?
- Artifact Repository?
- Containers allowed?
- Cloud service provider?
- How many environments are there?
- How much permission does DevOps team have on each environment?
- Do you have automated way to fetch credentials (service account, etc) when deploying IaC?
- Do you have automated way to map a new IP to existing DNS / taking off an VM from a load-balancer and adding a new one?


DEVOPS

1. What’s been your most challenging deployment/upgrade/migration?
Wealth Credit Market Risk Project
- migrating a working vm fron one tenant to another tenant
- SQLServer with lots to tables
- executables written C#, which updates DB using Thompson Reuters Eikon and perform analysis
- Thompson Reuters Eikon application which downloads market data in real time
- Copied tables and executables from old vm to new vm, and installed Thompson Reuters Eikon application on new vm
- Applied the same existing FW rules on the new vm
- Turned out that the application is not able to download market data
- Had meeting with TD FW team and looked at the live traffic and the application was not making request to different IP and port
- Had to open rules for those traffics
- Turned out that upon installing the application it will pick a particular IP from a set of IPs used to retrieve data
- Lesson learned is not to assume existing FW rules to work when migrating environment

2. Whiteboard the full architecture of the system.
- CI: Code Repo -> Build & Unit Test & Code Scan on CI box (Jenkins agents) -> Artifact Repo (Snapshot)
- CD: Release Artifact to Artifact Repo (Release) -> Integration/Functional/Non-Functional Test on CD Box (artifact is downloaded from Artifact Repo in each stage) -> User Acceptance Testing -> Release Engineering team signs off & promotes to Production

3. Discuss your experience building bridges between IT Ops, QA, and development.
Data Provisioning Pipeline project
- DevOps pipeline required structural change of code repository, automated testing, and deployment method
- Had meetings with dev manager what had to be done (breaking a big repo into modularized smaller repos to reduce build time, placing Jenkinsfile at the root of each code repository)
- Had meetings with QA manager how to automate scheduling of testing scripts (Company policy is that scripts must be run through a schduler called Autosys) It is by uploading definition file to Autosys tool
- Had meetings with the team (it is called ITS) that owned higher environment. Explained that we changed the deployment mechanism to achieve higher velicity and less error. And we prepared documentation for IT Ops to follow in higher environment (How to trigger automation, what to put in the manual gating, etc)
- 1. In person meeting 2. Explaining the value of automation (time save, error reduction, record tracking) that can justify effort 3. Laying out clear design of deployment pipeline and where each team (dev, QA, It Ops) fits in

4. Worst experience building bridges (or tearing down walls) between Development, QA and System Administration
- Dev manager saying "NO" to any changes to their repo saying they are OK with manual build and monthly release instead of more frequent cycles. Had to start from a very small step by setting up pipeline for just one branch in the repo that simply did build & unit test. And then start adding code scanning tools to provide early feedback on developers. And then adding automated publishing artifacts to artifact repository. When the team started to see the value of the pipeline, I started propagating the pipeline to other branches in the repo, etc.
Key point is to build reputation within the team over time and start from a very small step that causes the minimal change to existing process.

5. Discuss the potential failure points of the system.
- lose access control to each component of CI/CD (Application servers, DevOps tools, etc) => Implement group based access to vms and tools. Trackable on-boarding process via ticketing system such as JIRA
- component failure of CI/CD => Implement intelligent monitoring, know your point of contact (In big organization, DevOps team may not have access to all tools)
- environmental differences such as executing custom commands in dev/qa VMs which make them different from vm in higher environment => control who can access VMs and audit activities from the log. Build IasS so that it is easy to do teardown and re-deploy.
- Compliance & auditing or lack of communication. Organizations have their own rules on development & deployment. this needs to be incorporated into the pipeline and must have agreement with IT Ops (this is usually the team that enforces organizational rule) how we are executing the automated deployment

6. Describe how you tested for potential failures and ensured availability.
-

7. Explain the system at a high level how requests flowed and data persistence and caching was handled.
-

8. Explain the scaling factors of the system – CPU, memory, disk I/O, etc. – How did you monitor and measure it?
-

9. What was the biggest failure of this system you had to manage and how did you handle it?
-

10. Tell me about a time that you have implemented an effective monitoring solution for a production system.
-

11. What is different about deploying software to 5,000 nodes vs. deploying that same software to 50 nodes?
-


TD

1. What was achieved

2. Shared commitment



APPLICATION RELEASE ENGINEER

1. Difference b/t tuple and list in Python
list = mutable, tuple = immutable

2. Container scalability in Kubernetes
Multi-container has scability problem?

3. How to figure out http request params from the Browser

4. Three streams of Unix
Standard input, output, error

5. How to know # of arguments passed into shell script

6. How to debug shell script

7. Standards for intalling COTS into company infrastructure



GENERAL

1. Tell me about yourself
2. Tell about a difficult situation you were faced and how you deal with it
3. Tell me about a time when you were confronted with an unpleasant customer and how you dealth with it
4. What do you know abou the company
5. What is your greatest achievement
6. Why should we offer you a job
7. What are your strengths?
8. What are your weakness?