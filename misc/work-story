What are my mistakes
What are my weaknesses
What are my strengths
What are my achievements
What is the greatest lesson you've learned?
What are you learning now?
How has failure shaped your life?
How can I add value to you?


RBC - Risk Data Agggregation and Risk Reporting

What business told me was rarely what they actually wanted. Requirements were never written in a way that delivered context. I realized I needed interpret the requirements correctly by contiune asking questions.

Mixing up with agile and waterfall was a mistake because we had fixed set of deliverables by certain date while allow new items to come into the sprint. And we end up infinite amount of work. If items come in, then new items need to come out.

Manual testing and deployment hit the limit quickly as the application became more complex. We insisted "due deligence" of human effort but we quickly realized that everyone makes mistakes. Automation is not only recommened, it is necessary.

When we were estimating the work effort, giving a range of time only made business assume the shortest time. I learned to consider the worst case scenario to always make promise that I can deliver, and also apply that principle when doing VSM.


TD - Data Provisioning Pipeline

I have not found interest in what people generally enjoy. We had a team event where most member went out go-karting. What I couldn't understand was that we would drive long time to get there, and drive the kart for several hours, and drive back home. Most team members loved the idea and went there but I didn't. (Partying and grabbing bear in a bar is fun for me but not camping, finishing, or go-karting)


TD - Real Estate Secure Lending and Home Owner's Journey


TD - Wealth Clieant Profile


TD - Enterprise Delivery Pipeline

Each developer of the pipeline was performing lots of manual configration on a VM running on Virtual Box. Everyone's development environment is thus different and everytime a new developer gets on-boarded, it was a lot of work to help setting up the system for the new developer. I came up with an idea to use bash scripts so that we can configure our VM in one shot, run all the tools inside docker in one shot, and configure all the tools in one shot. So that we could have reproducible environment and speed up our work dramatically.

Enterprise pipeline did not allow deployment configuration to be changed once the pipeline is fired. It was because of the idea that changes had to come from git, which we treated as a source of truth. I had to design a workflow such that a separate pipeline gets triggered from git that targets an existing pipeline and change its configiration.


TD - Layer6

When we on-board use cases to the pipeline in order to provision machine learning infrastructure, it was lots of effort to prepare pipeline configuration files manually. I came up with a set of bash script to automate the creation and update of these pipeline configurations.





EDP Issue
- all CD files
- eimpub job spec file
-


Use case on-boarding
- mockrisk
- rest preapproval (realtime)

Automation of pipeline configuration generation
- ADF instances, permissions, AKS & ACR permissions
- Pull request notification, CI/CD/pom.xml files
-

Monitoriing
- DataDog downtime for Azure VM monitoring

AKS
- AquaSec, DataDog

Docker images
- upgrade base, dev, and jupyter

Salt
- sudoless access to docker