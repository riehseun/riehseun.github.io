Design principles
- Unified Deployment Model (UDM)
- Model based (No tedious scripting)

Architecture
- Configuration repository (hosted in a database)
- REST API : via web-based GUI, CLI (Jython)
- Security : LDAP
- Plugins

Deployment Packages (that includes Deployables)
- Example : WAR, SQL, HTML, configuration files, data source, etc

Environments (that includes Containers)
- Example : Application server, web server, DB server, Message queue, etc

Library
- All data used by XLD is stored in Library
- Has 5 items : Task Monitor, Applications, Environments, Infrastructure, Configuration
- How to create Target Host? Infrastructure -> New -> overthere -> SshHost. Enter the name and properties. Then go to Infrastructure -> [your_vm] -> Check connection
- How to import application to deploy? Application -> Import
- Go to Infrastructure -> [your_vm] -> Discover -> [type_of_infra_discovered] -> DeploymentManager. Then, enter properties according to your infra type
- How to deploy application? Application -> [your_application] -> Deploy. You can also choolse to Update or Undeploy application
- How to create Deployment Package? Application -> New -> Application. Enter the name. Then, Applcation -> [your_application] -> New -> Deployment Package. Enter the name
- From [your_application], you can add artifacts & configurations by clicking "New"

Configuration Items (CI)
- Objects in XLD library
- Example : Infrastructure/jboss-vm/jboss-51
- ID is path of library
- Has types : jbossas.ServerV5, wls.Cluster, String (set/list), Integer, Boolean

Setting the stage
- Import Deployment Package, discover your infrastructure, define environment
- Manifest file (Xml) is used to describe Deployment Package
- Define middleware containers : define host -> discover (Ex. WebSphere Deployment Manager, JBoss Domain or WebLogic Domain) -> configure properties -> run discovery task -> review discovered CIs

Tasks and Steps
- Stop : wait until current step finishes and stop the task
- Abort : force kill current step and stop the task
- Skip : skip the step and engine considers step is executed

Property placeholders and dictionaries
- Property placeholders are specified in Deployables (They are like environment variables)
- Use double curly braces Ex. {{Placeholder}}
- Can be used to store credentials using encrypted dictionary

Orchestrator
- Combines individual component changes into a deployment workflow

Staging
- copies artifact before executing real deployment to minimize downtime of application
- StagingDictionary property must be set
- XLD : get the artifact from local/remote -> copy to work directory -> copy to target host -> clean up workspace
- Target host : copy to staging directory -> copy to temp directory -> copy to target path -> clean up staging and temp

Tags
- Maps deployables to containers

Release Dashboard
- Overview of deployment pipeline
- Promote application and configure checks (/ext/synthetic.xml)

Security
- Roles are associated with Principles (user or group from LDAP)
- Permissions are either Global or CI level

CLI
- Jython API : https://docs.xebialabs.com/jython-docs/#!/xl-deploy/5.1.x/
- CLI Manual : https://docs.xebialabs.com/xl-deploy/how-to/using-the-xl-deploy-cli.html

REST API
- Content is XML
- Basic Authentication
- https://docs.xebialabs.com/xl-deploy/latest/rest-api/

XL Deploy Configuration
- Plugins, step trigger, task trigger, etc

Config Compare
- Compares two or more CI trees

Community Plugins
- https://github.com/xebialabs-community (Not part of the product)
- Examples : xld-docker-plugin, xld-liquibase-plugin, xld-smoke-test-plugin, lock plugin, manual-step plugin, xld-puppet-plugin

Satellite feature
- Execute deployments on remote data centers
- Communication based on Transport Layer Security (TLS)

UDM Engine
- Deployment steps : Specification -> Delta analysis -> Orchestration -> Planning -> Execution
- Specification : Engine gets mapping from deployable to container
- Delta analysis : which deployeds need to be created, modified, destroyed, or left as-is
- Orchestration : one or multiple orchestrators are invoked to build the deployment plan (and sub-plans)
- Planning : delta specification is translated into a deployment plan by invoking the plugins
- Execution : PRE_FLIGHT (0) / STOP_ARTIFACTS (10) / STOP_CONTAINERS (20) / UNDEPLOY_ARTIFACTS (30) / DESTROY_RESOURCES (40) / CREATE_RESOURCES (60) / DEPLOY_ARTIFACTS (70) / START_CONTAINERS (80) / START_ARTIFACTS (90) / POST_FLIGHT (100)

Rules
- Use XML or Jython to specify the steps
- Rule scope : Pre-plan / Deployed / Plan / Post-plan

https://support.xebialabs.com