Design principles
- Unified Deployment Model (UDM)
- Model based (No tedious scripting)

Architecture
- Configuration repository (hosted in a database)
- REST API : via web-based GUI, CLI (Jython)
- Security : LDAP
- Plugins

Deployment Packages (that includes Deployables)
- Example : WAR, SQL, HTML, configuration files, data source, etc

Environments (that includes Containers)
- Example : Application server, web server, DB server, Message queue, etc

Library
- All data used by XLD is stored in Library
- Has 5 items : Task Monitor, Applications, Environments, Infrastructure, Configuration

Configuration Items (CI)
- Objects in XLD library
- Example : Infrastructure/jboss-vm/jboss-51
- ID is path of library
- Has types : jbossas.ServerV5, wls.Cluster, String (set/list), Integer, Boolean

Setting the stage
- Import Deployment Package, discover your infrastructure, define environment
- Manifest file (Xml) is used to describe Deployment Package
- Define middleware containers : define host -> discover (Ex. WebSphere Deployment Manager, JBoss Domain or WebLogic Domain) -> configure properties -> run discovery task -> review discovered CIs

Tasks and Steps
- Stop : wait until current step finishes and stop the task
- Abort : force kill current step and stop the task
- Skip : skip the step and engine considers step is executed

Property placeholders and dictionaries
- Property placeholders are specified in Deployables (They are like environment variables)
- Use double curly braces Ex. {{Placeholder}}
- Can be used to store credentials using encrypted dictionary

Orchestrator
- Combines individual component changes into a deployment workflow

Staging
- Staging dictionary must be set
- XLD : get the artifact from local/remote -> copy to work directory -> copy to target host -> clean up workspace
- Target host : copy to staging directory ->

Tags
- Maps deployables to containers