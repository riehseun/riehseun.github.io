Developing Cloud Native Applications

1. Options for building and running your app in the cloud [Glaucia Lemos]
- selling on Visual Studio and Visual Studio Code (Tons of extension)
- selling on Windows Powershell (they called it new Windows Terminal)
- ARM (Azure Resource Manager) Template : JSON/YAML to describe Azure Resources such as VMs, Services, etc
- Web Apps (PaaS) / Containers (ACI & AKS). Azure Container Instance - quick and short life time. Azure Kubernetes Service - orchestration
- senarios for containers : life-and-shift, microservices, ML, IoT
- VMs : very flexible when deploy in a Scale Set (can define scale conditions/metrics, scale up / out)
- Azure Key Vault : encryption keys, certificates, passwords, SQL connection strings, storage account keys

2. Options for data in the cloud [Glaucia Lemos]
- volumn (how much data) / velocity (how fast data is processed) / variety
- structured data (relational) / unstructured data (files/photos/vidoes) / semi-structured data (json/yaml/xml)
- Azure blob storage - massive / unstructured data
- Azure SQL database / SQL data warehouse / PostgreSQL / MySQL - relational data (three flavors - Single / Elastic / Managed)
- Azure Cosmos DB - NoSQL (Cassandra / MongoDB) Collection -> Project -> Document. Data can be replicated globally

3. Modernizing your application with containers [Aaron Wislang]
- containters are highly configured processes (it is not lightweight) / leverage kernal features to isolate processes / cgroupd controls resources it can consume / namespaces control what process can see / shared OS kernal
- each layer represents each instruction in Dockerfile / all layers except last one is read-only / docker image is consisted with a series of layers
- Azure Container Registery (ACR) only private : Dockerhub is public by default
- Azure Container Instances (ACI) : CaaS (no need to provision VMs)
- containerized app, build & push to registry, and deploy to Azure App Service

4. Consolidating infrastructure with AKS [Aaron Wislang]
- Kubernetes : standardized API for infra abstraction / self-healing / scalability / extensibility - eco system built on top of native Kubernetes
- network managed by ingress (in AKS, App Gateway. Open source version is nginx)
- AKS availability zones : nodes are replicated to different regions to achieve redundancy
- Azure has cluster autoscaler : Horizontal Pod Autoscaler (increase/decrease replicas) -> Deployment -> ReplicaSet
- virtual kubelet : act a node with unlimited size / AKS virtual node is based on virtual kubelet

5. Taking your app to the next level with monitoring, performance, and scaling [Maxime Rouiller]
- production issue? identify issue => troubleshoot => fix => prevention measures
- Application Insights : application performance monitoring => request rates / response times / failure rates / exceptions / page views / load performances / CPU / menory / network / custom metrics


